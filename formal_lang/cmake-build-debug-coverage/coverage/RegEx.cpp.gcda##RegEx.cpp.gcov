        -:    0:Source:C:/Users/polly/CLionProjects/formal_lang/src/RegEx.cpp
        -:    0:Graph:C:\Users\polly\CLionProjects\formal_lang\cmake-build-debug-coverage\CMakeFiles\unit_tests.dir\src\RegEx.cpp.gcno
        -:    0:Data:C:\Users\polly\CLionProjects\formal_lang\cmake-build-debug-coverage\CMakeFiles\unit_tests.dir\src\RegEx.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "RegEx.h"
        -:    2:
        -:    3:int INF = 1000000000;
        -:    4:
function _ZN5RegExC2EicRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 9 returned 100% blocks executed 62%
        9:    5:RegEx::RegEx(int k0, char x0, const std::string &s0) {
        9:    5-block  0
call    0 returned 9
call    1 returned 9
branch  2 taken 9 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:    5-block  1
call    4 never executed
    $$$$$:    5-block  2
call    5 never executed
        9:    6:    k =k0;
        9:    7:    x= x0;
        9:    8:    s = s0;
        9:    8-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:    9:}
        9:    9-block  0
        -:   10:
function _ZN5RegEx4plusEv called 22 returned 100% blocks executed 75%
       22:   11:void RegEx::plus() {
       44:   12:    Node second = stack_for_expr.top();
       22:   12-block  0
call    0 returned 22
call    1 returned 22
branch  2 taken 22 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 22
    $$$$$:   12-block  1
call    5 never executed
       22:   13:    stack_for_expr.pop();
       22:   13-block  0
call    0 returned 22
       44:   14:    Node first = stack_for_expr.top();
call    0 returned 22
call    1 returned 22
branch  2 taken 22 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 22
    $$$$$:   14-block  0
call    5 never executed
       22:   15:    stack_for_expr.pop();
       22:   15-block  0
call    0 returned 22
       44:   16:    Node new_node;
call    0 returned 22
call    1 returned 22
    $$$$$:   16-block  0
call    2 never executed
       44:   17:    std::vector<int> new_prefs(std::max(first.max_pref_x, second.max_pref_x) + 1, INF);
call    0 returned 22
call    1 returned 22
call    2 returned 22
branch  3 taken 22 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 22
    $$$$$:   17-block  0
    $$$$$:   17-block  1
call    6 never executed
       65:   18:    for (int j = 0; j < new_prefs.size(); ++j) {
       65:   18-block  0
call    0 returned 65
branch  1 taken 43 (fallthrough)
branch  2 taken 22
       43:   18-block  1
       43:   19:        if (j <= first.max_pref_x) {
       43:   19-block  0
branch  0 taken 30 (fallthrough)
branch  1 taken 13
       30:   20:            new_prefs[j] = std::min(INF, first.pref_and_min_len[j]);
       30:   20-block  0
call    0 returned 30
call    1 returned 30
call    2 returned 30
        -:   21:        }
       43:   22:        if (j <= second.max_pref_x) {
       43:   22-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 19
       24:   23:            new_prefs[j] = std::min(new_prefs[j], second.pref_and_min_len[j]);\
       24:   23-block  0
call    0 returned 24
call    1 returned 24
call    2 returned 24
call    3 returned 24
        -:   24:
        -:   25:        }
        -:   26:    }
       22:   27:    new_node.max_total_x = std::max(first.max_total_x, second.max_total_x);
       22:   27-block  0
call    0 returned 22
       22:   28:    new_node.pref_and_min_len = new_prefs;
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:   29:    new_node.max_pref_x = (int) new_prefs.size() - 1;
       22:   29-block  0
call    0 returned 22
       22:   30:    new_node.min_len = std::min(first.min_len, second.min_len);
call    0 returned 22
       44:   31:    std::vector<bool> all_x(std::max(first.all_x.size(), second.all_x.size()), false);
call    0 returned 22
call    1 returned 22
call    2 returned 22
call    3 returned 22
call    4 returned 22
branch  5 taken 22 (fallthrough)
branch  6 taken 0 (throw)
       22:   31-block  0
call    7 returned 22
       22:   31-block  1
call    8 returned 22
    $$$$$:   31-block  2
    $$$$$:   31-block  3
    $$$$$:   31-block  4
    $$$$$:   31-block  5
    $$$$$:   31-block  6
call    9 never executed
       62:   32:    for (int j = 0; j < first.all_x.size(); ++j) {
       62:   32-block  0
call    0 returned 62
branch  1 taken 40 (fallthrough)
branch  2 taken 22
       40:   33:        all_x[j] = (all_x[j] | first.all_x[j]);
       40:   33-block  0
call    0 returned 40
call    1 returned 40
call    2 returned 40
call    3 returned 40
call    4 returned 40
call    5 returned 40
        -:   34:    }
       47:   35:    for (int j = 0; j < second.all_x.size(); ++j) {
       22:   35-block  0
       47:   35-block  1
call    0 returned 47
branch  1 taken 25 (fallthrough)
branch  2 taken 22
       25:   36:        all_x[j] = (all_x[j] | second.all_x[j]);
       25:   36-block  0
call    0 returned 25
call    1 returned 25
call    2 returned 25
call    3 returned 25
call    4 returned 25
call    5 returned 25
        -:   37:    }
       22:   38:    new_node.all_x = all_x;
       22:   38-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:   39:    stack_for_expr.push(new_node);
       22:   39-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:   40:}
        -:   41:
function _ZN5RegEx10star_kliniEv called 13 returned 100% blocks executed 82%
       13:   42:void RegEx::star_klini() {
       13:   43:    Node last = stack_for_expr.top();
       13:   43-block  0
call    0 returned 13
call    1 returned 13
branch  2 taken 13 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   43-block  1
call    4 never executed
       13:   44:    stack_for_expr.pop();
       13:   44-block  0
call    0 returned 13
       13:   45:    if (last.max_total_x == -1) {
branch  0 taken 7 (fallthrough)
branch  1 taken 6
        7:   46:        Node new_node;
        7:   46-block  0
call    0 returned 7
    $$$$$:   46-block  1
call    1 never executed
        7:   47:        new_node.max_total_x = 0;
        7:   48:        new_node.all_x = {true};
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:   48-block  0
        7:   49:        new_node.pref_and_min_len = last.pref_and_min_len;
        7:   49-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:   50:        if (last.max_pref_x == -1) {
        7:   50-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:   51:            new_node.pref_and_min_len = {0};
        7:   51-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:   51-block  1
    $$$$$:   51-block  2
        -:   52:        }
        7:   53:        new_node.pref_and_min_len[0] = 0;
        7:   53-block  0
call    0 returned 7
        7:   54:        new_node.max_pref_x = std::max(last.max_pref_x, 0);
call    0 returned 7
        7:   55:        new_node.min_len = 0;
        7:   56:        stack_for_expr.push(new_node);
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:   57:        return;
        7:   57-block  0
call    0 returned 7
        -:   58:    }
       12:   59:    std::vector<int> new_prefs(k + 1, INF);
        6:   59-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 6
    $$$$$:   59-block  1
    $$$$$:   59-block  2
call    5 never executed
       12:   60:    std::vector<bool> new_all_x(k + 1, false);
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:   60-block  0
call    4 returned 6
call    5 returned 6
    $$$$$:   60-block  1
    $$$$$:   60-block  2
    $$$$$:   60-block  3
call    6 never executed
        6:   61:    new_all_x[0] = true;
call    0 returned 6
call    1 returned 6
        6:   62:    new_prefs[0] = 0;
call    0 returned 6
        6:   63:    int max_x = 0;
        6:   64:    int max_pref_x = std::max(0, last.max_pref_x);
call    0 returned 6
       27:   65:    for (int j = 0; j <= k; ++j) {
       27:   65-block  0
branch  0 taken 21 (fallthrough)
branch  1 taken 6
       21:   65-block  1
       74:   66:        for (int t = 0; t <= last.max_total_x; ++t) {
       21:   66-block  0
       74:   66-block  1
branch  0 taken 53 (fallthrough)
branch  1 taken 21
       53:   66-block  2
       53:   67:            if (j <= last.max_pref_x) {
       53:   67-block  0
branch  0 taken 45 (fallthrough)
branch  1 taken 8
       45:   68:                new_prefs[j] = std::min(new_prefs[j], last.pref_and_min_len[j]);
       45:   68-block  0
call    0 returned 45
call    1 returned 45
call    2 returned 45
call    3 returned 45
        -:   69:            }
       53:   70:            if (j <= last.max_total_x) {
       53:   70-block  0
branch  0 taken 43 (fallthrough)
branch  1 taken 10
       43:   71:                new_all_x[j] = new_all_x[j] || last.all_x[j];
       43:   71-block  0
call    0 returned 43
call    1 returned 43
branch  2 taken 17 (fallthrough)
branch  3 taken 26
       17:   71-block  1
call    4 returned 17
call    5 returned 17
branch  6 taken 5 (fallthrough)
branch  7 taken 12
       31:   71-block  2
       12:   71-block  3
       43:   71-block  4
call    8 returned 43
call    9 returned 43
        -:   72:            }
       53:   73:            if (j >= t && last.all_x[t]) {
       53:   73-block  0
branch  0 taken 39 (fallthrough)
branch  1 taken 14
       39:   73-block  1
call    2 returned 39
call    3 returned 39
branch  4 taken 19 (fallthrough)
branch  5 taken 20
       19:   73-block  2
       34:   73-block  3
       53:   73-block  4
branch  6 taken 19 (fallthrough)
branch  7 taken 34
       19:   74:                new_prefs[j] = std::min(new_prefs[j], new_prefs[j - t] + t);
       19:   74-block  0
call    0 returned 19
call    1 returned 19
call    2 returned 19
call    3 returned 19
       19:   75:                new_all_x[j] = new_all_x[j - t] || new_all_x[j];
call    0 returned 19
call    1 returned 19
branch  2 taken 2 (fallthrough)
branch  3 taken 17
        2:   75-block  0
call    4 returned 2
call    5 returned 2
branch  6 taken 0 (fallthrough)
branch  7 taken 2
       17:   75-block  1
        2:   75-block  2
       19:   75-block  3
call    8 returned 19
call    9 returned 19
       19:   76:                if (new_all_x[j]) {
call    0 returned 19
call    1 returned 19
branch  2 taken 17 (fallthrough)
branch  3 taken 2
       17:   77:                    max_x = j;
       17:   77-block  0
        -:   78:                }
       19:   79:                if (new_prefs[j]) {
       19:   79-block  0
call    0 returned 19
branch  1 taken 17 (fallthrough)
branch  2 taken 2
       17:   80:                    max_pref_x = std::max(j, max_pref_x);
       17:   80-block  0
call    0 returned 17
        -:   81:                }
        -:   82:            }
        -:   83:        }
        -:   84:    }
       12:   85:    Node new_node;
        6:   85-block  0
call    0 returned 6
        6:   85-block  1
call    1 returned 6
    $$$$$:   85-block  2
call    2 never executed
        6:   86:    new_prefs[0] = 0;
call    0 returned 6
        6:   87:    new_all_x[0] = true;
call    0 returned 6
call    1 returned 6
        6:   88:    new_node.max_total_x = max_x;
        6:   89:    new_node.all_x = new_all_x;
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   90:    new_node.max_pref_x = max_pref_x;
        6:   91:    new_node.pref_and_min_len = new_prefs;
        6:   91-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   92:    new_node.min_len = 0;
        6:   93:    stack_for_expr.push(new_node);
        6:   93-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        -:   94:}
        -:   95:
function _ZN5RegEx6concatEv called 38 returned 100% blocks executed 79%
       38:   96:void RegEx::concat() {
       76:   97:    Node second = stack_for_expr.top();
       38:   97-block  0
call    0 returned 38
call    1 returned 38
branch  2 taken 38 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 38
    $$$$$:   97-block  1
call    5 never executed
       38:   98:    stack_for_expr.pop();
       38:   98-block  0
call    0 returned 38
       76:   99:    Node first = stack_for_expr.top();
call    0 returned 38
call    1 returned 38
branch  2 taken 38 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 38
    $$$$$:   99-block  0
call    5 never executed
       38:  100:    stack_for_expr.pop();
       38:  100-block  0
call    0 returned 38
       76:  101:    Node new_node;
call    0 returned 38
call    1 returned 38
    $$$$$:  101-block  0
call    2 never executed
       38:  102:    int len_pref1 = first.max_total_x + second.max_pref_x;
       38:  103:    if (second.max_pref_x < 0 || first.max_total_x < 0) {
branch  0 taken 22 (fallthrough)
branch  1 taken 16
       22:  103-block  0
branch  2 taken 9 (fallthrough)
branch  3 taken 13
       25:  104:        len_pref1 = -1;
       25:  104-block  0
        -:  105:    }
       38:  106:    int len_pref2 = first.max_pref_x;
       76:  107:    std::vector<int> new_prefs(std::max(len_pref1, len_pref2) + 1, INF);
       38:  107-block  0
call    0 returned 38
call    1 returned 38
call    2 returned 38
branch  3 taken 38 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 38
    $$$$$:  107-block  1
    $$$$$:  107-block  2
call    6 never executed
       38:  108:    int sz_x = (second.max_pref_x >= 0 && first.max_total_x >= 0) ? first.max_total_x + second.max_pref_x
branch  0 taken 22 (fallthrough)
branch  1 taken 16
       22:  108-block  0
branch  2 taken 13 (fallthrough)
branch  3 taken 9
       13:  108-block  1
       25:  108-block  2
        -:  109:                                                                  : -1;
       76:  110:    std::vector<bool> all_x(sz_x + 1, false);
       38:  110-block  0
call    0 returned 38
call    1 returned 38
branch  2 taken 38 (fallthrough)
branch  3 taken 0 (throw)
       38:  110-block  1
call    4 returned 38
       38:  110-block  2
call    5 returned 38
    $$$$$:  110-block  3
    $$$$$:  110-block  4
    $$$$$:  110-block  5
call    6 never executed
       80:  111:    for (int j = 0; j <= first.max_total_x; ++j) {
       80:  111-block  0
branch  0 taken 42 (fallthrough)
branch  1 taken 38
       42:  111-block  1
      103:  112:        for (int t = 0; t <= second.max_pref_x; ++t) {
       42:  112-block  0
      103:  112-block  1
branch  0 taken 61 (fallthrough)
branch  1 taken 42
       61:  112-block  2
       61:  113:            if (first.all_x[j]) {
       61:  113-block  0
call    0 returned 61
call    1 returned 61
branch  2 taken 27 (fallthrough)
branch  3 taken 34
       27:  114:                new_prefs[j + t] = std::min(new_prefs[j + t], j + second.pref_and_min_len[t]);
       27:  114-block  0
call    0 returned 27
call    1 returned 27
call    2 returned 27
call    3 returned 27
        -:  115:            }
       61:  116:            if (first.all_x[j] && t < second.all_x.size() && second.all_x[t]) {
       61:  116-block  0
call    0 returned 61
call    1 returned 61
branch  2 taken 27 (fallthrough)
branch  3 taken 34
       27:  116-block  1
call    4 returned 27
branch  5 taken 25 (fallthrough)
branch  6 taken 2
       25:  116-block  2
call    7 returned 25
call    8 returned 25
branch  9 taken 17 (fallthrough)
branch 10 taken 8
       17:  116-block  3
       44:  116-block  4
       61:  116-block  5
branch 11 taken 17 (fallthrough)
branch 12 taken 44
       17:  117:                all_x[t + j] = true;
       17:  117-block  0
call    0 returned 17
call    1 returned 17
        -:  118:            }
        -:  119:        }
        -:  120:    }
       86:  121:    for (int j = 0; j <= first.max_pref_x; ++j) {
       38:  121-block  0
       86:  121-block  1
branch  0 taken 48 (fallthrough)
branch  1 taken 38
       48:  122:        new_prefs[j] = std::min(new_prefs[j], first.pref_and_min_len[j] + second.min_len);
       48:  122-block  0
call    0 returned 48
call    1 returned 48
call    2 returned 48
call    3 returned 48
        -:  123:    }
       38:  124:    new_node.max_pref_x = std::max(len_pref2, len_pref1);
       38:  124-block  0
call    0 returned 38
       38:  125:    new_node.min_len = first.min_len + second.min_len;
       38:  126:    new_node.pref_and_min_len = new_prefs;
call    0 returned 38
branch  1 taken 38 (fallthrough)
branch  2 taken 0 (throw)
       38:  127:    new_node.max_total_x = sz_x;
       38:  128:    new_node.all_x = all_x;
       38:  128-block  0
call    0 returned 38
branch  1 taken 38 (fallthrough)
branch  2 taken 0 (throw)
       38:  129:    stack_for_expr.push(new_node);
       38:  129-block  0
call    0 returned 38
branch  1 taken 38 (fallthrough)
branch  2 taken 0 (throw)
       38:  130:}
        -:  131:
function _ZN5RegEx10add_letterEi called 69 returned 100% blocks executed 69%
       69:  132:void RegEx::add_letter(int i) {
      138:  133:    Node new_node;
       69:  133-block  0
call    0 returned 69
       69:  133-block  1
call    1 returned 69
    $$$$$:  133-block  2
call    2 never executed
       69:  134:    if (s[i] == x) {
call    0 returned 69
branch  1 taken 69 (fallthrough)
branch  2 taken 0 (throw)
       69:  134-block  0
branch  3 taken 26 (fallthrough)
branch  4 taken 43
       26:  135:        new_node.max_total_x = 1;
       26:  136:        new_node.min_len = 1;
       26:  137:        new_node.max_pref_x = 1;
       26:  138:        new_node.pref_and_min_len = {INF, 1};
       26:  138-block  0
call    0 returned 26
branch  1 taken 26 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  138-block  1
       26:  139:        new_node.all_x = {false, true};
       26:  139-block  0
call    0 returned 26
branch  1 taken 26 (fallthrough)
branch  2 taken 0 (throw)
       26:  139-block  1
    $$$$$:  139-block  2
       43:  140:    } else if (s[i] == '1') {
       43:  140-block  0
call    0 returned 43
branch  1 taken 43 (fallthrough)
branch  2 taken 0 (throw)
       43:  140-block  1
branch  3 taken 6 (fallthrough)
branch  4 taken 37
        6:  141:        new_node.max_total_x = 0;
        6:  142:        new_node.min_len = 0;
        6:  143:        new_node.max_pref_x = 0;
        6:  144:        new_node.pref_and_min_len = {1};
        6:  144-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  144-block  1
        6:  145:        new_node.all_x = {true};
        6:  145-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:  145-block  1
    $$$$$:  145-block  2
        -:  146:    } else {
       37:  147:        new_node.max_total_x = -1;
       37:  148:        new_node.min_len = 1;
       37:  149:        new_node.max_pref_x = -1;
       37:  150:        new_node.pref_and_min_len = {INF, INF};
       37:  150-block  0
call    0 returned 37
branch  1 taken 37 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  150-block  1
       37:  151:        new_node.all_x = {false, false};
       37:  151-block  0
call    0 returned 37
branch  1 taken 37 (fallthrough)
branch  2 taken 0 (throw)
       37:  151-block  1
    $$$$$:  151-block  2
        -:  152:    }
       69:  153:    stack_for_expr.push(new_node);
       69:  153-block  0
call    0 returned 69
branch  1 taken 69 (fallthrough)
branch  2 taken 0 (throw)
       69:  154:}
        -:  155:
function _ZN5RegEx11solve_regexEv called 9 returned 100% blocks executed 100%
        9:  156:    int RegEx::solve_regex() {
      151:  157:    for (int i = 0; i < s.size(); ++i) {
        9:  157-block  0
      151:  157-block  1
call    0 returned 151
branch  1 taken 142 (fallthrough)
branch  2 taken 9
      142:  157-block  2
      142:  158:        if (s[i] == '+') {
      142:  158-block  0
call    0 returned 142
branch  1 taken 142 (fallthrough)
branch  2 taken 0 (throw)
      142:  158-block  1
branch  3 taken 22 (fallthrough)
branch  4 taken 120
       22:  159:            plus();
       22:  159-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
      120:  160:        } else if (s[i] == '*') {
      120:  160-block  0
call    0 returned 120
branch  1 taken 120 (fallthrough)
branch  2 taken 0 (throw)
      120:  160-block  1
branch  3 taken 13 (fallthrough)
branch  4 taken 107
       13:  161:            star_klini();
       13:  161-block  0
call    0 returned 13
branch  1 taken 13 (fallthrough)
branch  2 taken 0 (throw)
      107:  162:        } else if (s[i] == '.') {
      107:  162-block  0
call    0 returned 107
branch  1 taken 107 (fallthrough)
branch  2 taken 0 (throw)
      107:  162-block  1
branch  3 taken 38 (fallthrough)
branch  4 taken 69
       38:  163:            concat();
       38:  163-block  0
call    0 returned 38
branch  1 taken 38 (fallthrough)
branch  2 taken 0 (throw)
        -:  164:        } else {
       69:  165:            add_letter(i);
       69:  165-block  0
call    0 returned 69
branch  1 taken 69 (fallthrough)
branch  2 taken 0 (throw)
        -:  166:        }
        -:  167:    }
       18:  168:    Node node = stack_for_expr.top();
        9:  168-block  0
call    0 returned 9
call    1 returned 9
branch  2 taken 9 (fallthrough)
branch  3 taken 0 (throw)
        9:  168-block  1
call    4 returned 9
        9:  169:    if (node.max_pref_x < k) {
        9:  169-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 6
        3:  170:        return INF;
        3:  170-block  0
        -:  171:    } else {
        6:  172:        return stack_for_expr.top().pref_and_min_len[k];
        6:  172-block  0
call    0 returned 6
call    1 returned 6
        -:  173:    }
        -:  174:}
        -:  175:
function _Z10get_answerNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEci called 9 returned 100% blocks executed 80%
        9:  176:    void get_answer(std::string s, char x, int k){
       18:  177:        RegEx regex(k, x, s);
        9:  177-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  177-block  1
call    3 returned 9
    $$$$$:  177-block  2
call    4 never executed
        9:  178:        int n = regex.solve_regex();
        9:  178-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  179:        if (n==INF){
        9:  179-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 6
        3:  180:            std::cout<<"INF";
        3:  180-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:  181:        }else{
        6:  182:            std::cout<<n;
        6:  182-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        -:  183:        }
        9:  184:    }
        -:  185:
        -:  186://    int main(){
        -:  187://        get_answer("abcd..+*1.", 'e', 3);
        -:  188://    }
        -:  189:
